from __future__ import print_function
import numpy as np
import pandas as pd
import time


N_STATES = 3   # the length of the 1 dimensional world
ACTIONS = ['left', 'right','up','down']     # available actions
EPSILON = 0.9   # greedy police
ALPHA = 0.1     # learning rate
GAMMA = 0.9    # discount factor
MAX_EPISODES = 13  # maximum episodes
FRESH_TIME = 0.3  # fresh time for one move



def build_q_table(n_states, actions):
    table = pd.DataFrame(
        np.zeros((n_states, len(actions))),     # q_table initial values
        columns=actions,    # actions's name
    )
    # print(table)    # show table
    return table


def choose_action(state, q_table):
    # This is how to choose an action
    state_actions = q_table.iloc[state, :]
    if (np.random.uniform() > EPSILON) or ((state_actions == 0).all()):  # act non-greedy or state-action have no value
        action_name = np.random.choice(ACTIONS)
    else:   # act greedy
        action_name = state_actions.idxmax()    # replace argmax to idxmax as argmax means a different function in newer version of pandas
    return action_name

#S=(a,b)
def get_env_feedback(a, b, S, A):
    # This is how agent will interact with the environment

    if A == 'right':    # move right
        if (a == N_STATES - 1)and(b == N_STATES - 2):   # terminate
            S_ = 'terminal'
            R = 1
        else:
            R = 0
            if b == N_STATES - 1:
                S = (a, b)
                S_ = S
            else:
                b = b+1
                S = (a, b)
                S_ = S
    elif(A == 'left'):   # move left
        R = 0
        if b == 0:
            S = (a, b)
            S_ = S# reach the wall
        else:
            b = b-1
            S = (a, b)
            S_ = S
    elif(A == 'up'):
        R = 0
        if a == 0:
            S = (a, b)
            S_ = S# reach the wall
        else:
            a = a - 1
            S = (a, b)
            S_ = S

    else:
        if (a == N_STATES - 2)and(b == N_STATES - 1):   # terminate
            S_ = 'terminal'
            R = 1
        else:
            R = 0
            if a == N_STATES - 1:
                S = (a, b)
                S_ = S
            else:
                a = a + 1
                S=(a,b)
                S_ = S

    return a, b, S_, R


def update_env(S, episode, step_counter):
    # This is how environment be updated
    env_list1 = ['-']*((N_STATES)*(N_STATES)-1) + ['T']   # '---------T' our environment
    env_list=np.array(env_list1).reshape(N_STATES,N_STATES)
    if S == 'terminal':
        interaction = 'Episode %s: total_steps = %s' % (episode+1, step_counter)
        print('\r{}'.format(interaction), end='')
        time.sleep(2)


    else:
        env_list[S] = 'o'
        print('\r{}'.format(env_list),end='')
        time.sleep(FRESH_TIME)

def Translate(a,b,s):
    if a == 0:
        s = b
    elif(a == 1):
        s = b+3
    else:
        s = b+6
    return s

def rl():
    # main part of RL loop
    q_table = build_q_table(N_STATES*N_STATES, ACTIONS)
    for episode in range(MAX_EPISODES):
        a = 0
        b = 0
        s = 0
        x = 0
        step_counter = 0
        S = (a,b)
        is_terminated = False
        update_env(S, episode, step_counter)
        while not is_terminated:
            x = Translate(a, b, s)
            A = choose_action(s, q_table)
            a, b, S_, R = get_env_feedback(a, b, S, A)  # take action & get next state and reward
            x_= Translate(a, b, s)
            q_predict = q_table.loc[s, A]
            if S_ != 'terminal':
                q_target = R + GAMMA * q_table.iloc[x_, :].max()   # next state is not terminal
            else:
                q_target = R     # next state is terminal
                is_terminated = True    # terminate this episode

            q_table.loc[x, A] += ALPHA * (q_target - q_predict)  # update
            S = S_  # move to next state

            update_env(S, episode, step_counter+1)
            step_counter += 1
    return q_table


if __name__ == "__main__":
    q_table = rl()
    print('\r\nQ-table:\n')
print(q_table)
